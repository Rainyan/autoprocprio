name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements.txt
          pip install --upgrade pyinstaller

      - name: Build target
        run: pyinstaller --onefile --version-file version.rc autoprocprio.py
      
      - name: Create build compressed archive
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: Compress-Archive -Path ./dist -DestinationPath ${{ github.workspace }}/${{ github.event.repository.name }}-${{ runner.os }}.zip
        
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}-${{ runner.os }}
          release_name: Release (${{runner.os}}) ${{ github.ref }}
          body: Automated release build for ${{ runner.os }}. This is a standalone build that bundles all the requirements into the executable.
          draft: true
          prerelease: true
      
      - name: Debug
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          dir
          pushd dist
          dir
          popd
      
      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ github.workspace }}/${{ github.event.repository.name }}-${{ runner.os }}.zip
          asset_name: ${{ github.event.repository.name }}-${{ runner.os }}.zip
          asset_content_type: application/zip
